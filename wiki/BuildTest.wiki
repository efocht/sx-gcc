#summary Building and testing sx-gcc and sx-binutils.
#labels building,testing,dejagnu,gcc

= Introduction =

This page describes how to download and build sx-gcc and sx-binutils. Right now this should be done on a machine on which the SX cross-kit is installed. Until we get the GNU assembler and linker running, sxld and sxas need to be used. Right now also the libc delivered with the SX needs to be used!

= Details =

Check out repositories:
{{{
svn co https://source.tree.se/sx/sx-binutils/svn/trunk sx-binutils
svn co https://source.tree.se/sx/sx-gcc/svn/trunk sx-gcc
svn co https://source.tree.se/sx/sx-gcc/svn/includes sx-includes
}}}

Set up includes (WARNING: these are fake includes, copied from x86_64 and not really tested for full compatibility with the SX libc API!). If you are on a SX frontend machine you can try using a copy of the original super-ux libc includes (located in /SX/usr/include).
{{{
mkdir -p sx/sx8-nec-superux
cd sx/sx8-nec-superux
ln -s ../../sx-includes/ include
cd ../..
}}}

Build binutils:
{{{
cd sx-binutils 
./configure --target=sx8-nec-superux --enable-languages=c --prefix=`pwd`/../sx
make
make install
cd ..
}}}

GNU assembler is working pretty well and you can use it. Right now the GNU linker needs to be replaced by *sxld* from the crosskit. For that you'll need to:
 # make sure your PATH environment variable is set in such a manner that *sxld* and *sxas* are in the execution path.
 # create a wrapper script for the linker and replace the GNU ld:
{{{
cd sx/sx8-nec-superux/bin/
mv ld ld_gnu

cat <<'EOF' >ld_sxld
#!/bin/sh
#echo "RUN: $0 $@"
while [ -n "$1" ]; do
    case "$1" in
    -L*)
        ldir=$1
        shift
        OPTS="$OPTS $ldir"
        ldir=`echo $ldir | sed -e "s:^-L::"`
        LIBDIRS="$LIBDIRS $ldir"
        ;;
    -l*)
        lib=$1
        shift
        OPTS="$OPTS $lib"
        lib=`echo $lib | sed -e "s:^-l::"`
        for d in $LIBDIRS; do
            libpath=$d/lib${lib}.a
            if [ -f $libpath ]; then
                OPTS="$OPTS $libpath"
                break
            fi
        done
        ;;
    *)
        OPTS="$OPTS $1"
        shift
        ;;
    esac
done
#echo "sxld $OPTS"
eval sxld $OPTS
EOF

# replace original linker with wrapper for sxld
chmod 755 ld_sxld
ln -s ld_sxld ld
cd ../../bin
mv sx8-nec-superux-ld sx8-nec-superux-ld_gnu
ln -s ../sx8-nec-superux/bin/ld_sxld sx8-nec-superux-ld
cd ../..
}}}
 # if you want to test with *sxas* instead of *GNU as*, create a wrapper script for *sxas*:
{{{
cd sx/sx8-nec-superux/bin/
mv as as_gnu

cat <<'EOF' >as_sxas
#!/bin/sh
ofile=`mktemp`
sxas -h sx6 "$@" >$ofile 2>&1
err=$?
grep -v "Warning: illegal offset" $ofile | egrep -v "^Assembler:"
rm $ofile
exit $err
EOF

# replace GNU assembler linker with wrapper for sxas
chmod 755 as_sxas
ln -s as_sxas as
cd ../../bin
mv sx8-nec-superux-as sx8-nec-superux-as_gnu
ln -s ../sx8-nec-superux/bin/as_sxas sx8-nec-superux-as
cd ../..
}}}

Build gcc:
{{{
mkdir sx-build
cd sx-build
../sx-gcc/configure  --target=sx8-nec-superux --enable-languages=c \
  --prefix=`pwd`/../sx --disable-libssp --disable-threads
make -j 2
}}}

If GCC build fails during cross compilation of libgcc2 or other libraries for the SX cross environment, we need you to do the following with each bug encountered at this stage:
 * move to the directory where the build failed (make will spit out "Leaving directory xyz" when it fails),
 * reproduce the whole command line that failed (it will most likely begin with "/home/jaka/dev/sx/gcc/build/./gcc/xgcc"), and add "-save-temps -v" to it. run it!
 * now attach the whole output of this run to the bug report, as well as the intermediate files (preprocessed C source and generated assembler source, if they were generated)

= Testing =

== Setting up DejaGNU ==

For running the GCC automated testing from the cross-compile machine you must have access to a SX machine either through ssh or rsh. Let's suppose your SX is called *v00* and you can access it though ssh from the compile machine. The simplest configuration is:

 # In your home directory create the file ~/.dejagnurc containing
{{{
set boards_dir ~/.dejagnu_boards
}}}
 # Create the ~/.dejagnu_boards directory and in it a file named *v00.exp* containing the description how to access the remote node:
{{{
load_generic_config "unix";
set_board_info hostname v00;
set_board_info username efocht;
set_board_info shell_prompt    "$ ";
set_board_info rsh_prog /usr/bin/ssh;
set_board_info rcp_prog /usr/bin/scp;
}}}

== Running tests ==

First: add sx/bin to your PATH environment variable, such that the commands sx8-nec-superux-* can be found.

From inside the GCC build directory you can now run tests by calling:
{{{
env RUNTESTFLAGS="--target_board=v00" make check
}}}

It is possible to limit the range of tests, for example:
{{{
env RUNTESTFLAGS="--target_board=v00 compile.exp" make check
env RUNTESTFLAGS="--target_board=v00 execute.exp" make check
env RUNTESTFLAGS="--target_board=v00 builtins.exp" make check
}}}

If you need more verbosity, you can add several *-v* to the RUNTESTFLAGS.

The default output of the tests is limited and mainly shows failures. The full output is stored in the file gcc/testsuite/gcc/gcc.log .