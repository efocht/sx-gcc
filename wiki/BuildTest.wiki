#summary Building and testing sx-gcc and sx-binutils.
#labels building,testing,dejagnu,gcc

= Introduction =

This page describes how to download and build sx-gcc and sx-binutils.

NOTE: you will need standard C libs (libc, startup files etc.) and headers delivered with the SX in order to build running SX executables, as we don't yet have a glibc/newlib port for SX.

= Details =

Check out repositories:
{{{
svn co https://source.tree.se/sx/sx-binutils/svn/trunk sx-binutils
svn co https://source.tree.se/sx/sx-gcc/svn/trunk sx-gcc
svn co https://source.tree.se/sx/sx-gcc/svn/includes sx-includes
}}}

{{{https://source.tree.se/sx/sx-binutils/svn/trunk}}} will point you at the current development version of SX port of binutils 2.19. if this version causes you problems, you can try the 2.18 branch from {{{https://source.tree.se/sx/sx-binutils/svn/branches/sx-binutils-2.18/}}} or one of the [http://code.google.com/p/sx-gcc/downloads/list released tarballs]

Set up includes (WARNING: these are fake includes, copied from x86_64 and not really compatibile with the SX libc API!). If you have access to an SX machine you should use a copy of the original super-ux libc includes (located in /SX/usr/include).
{{{
mkdir -p sx/sx8-nec-superux
cd sx/sx8-nec-superux
ln -s ../../sx-includes/ include
cd ../..
}}}

Build binutils:
{{{
cd sx-binutils 
./configure --target=sx8-nec-superux --enable-languages=c --prefix=`pwd`/../sx
make
make install
cd ..
}}}

Both GNU assembler and GNU linker are working pretty well and you can safely use both of them. 

You can also opt to use the assembler and linker from SX crosskit. To this end, you will need to use scripts from 

https://source.tree.se/sx/sx-gcc/svn/tools/testbench/sx-exe/

Download the scripts to your system, chmod them to 0755, remove as and ld installed by the SX port of binutils and created softlinks pointing to just downloaded sx[as|ld].sh in their stead.

Build gcc:
{{{
mkdir sx-build
cd sx-build
../sx-gcc/configure  --target=sx8-nec-superux --enable-languages=c \
  --prefix=`pwd`/../sx --disable-libssp --disable-threads
make -j 2
}}}

If GCC build fails during cross compilation of libgcc2 or other libraries for the SX cross environment, we need you to do the following with each bug encountered at this stage:
 * move to the directory where the build failed (make will spit out "Leaving directory xyz" when it fails),
 * reproduce the whole command line that failed (it will most likely begin with "/home/jaka/dev/sx/gcc/build/./gcc/xgcc"), and add "-save-temps -v" to it. run it!
 * now attach the whole output of this run to the bug report, as well as the intermediate files (preprocessed C source and generated assembler source, if they were generated)

= Testing =

== Setting up DejaGNU ==

For running the GCC automated testing from the cross-compile machine you must have access to a SX machine either through ssh or rsh. Let's suppose your SX is called *v00* and you can access it though ssh from the compile machine. The simplest configuration is:

 # In your home directory create the file ~/.dejagnurc containing
{{{
set boards_dir ~/.dejagnu_boards
}}}
 # Create the ~/.dejagnu_boards directory and in it a file named *v00.exp* containing the description how to access the remote node:
{{{
load_generic_config "unix";
set_board_info hostname v00;
set_board_info username efocht;
set_board_info shell_prompt    "$ ";
set_board_info rsh_prog /usr/bin/ssh;
set_board_info rcp_prog /usr/bin/scp;
}}}

To run the tests on a SX-6 machine add 
{{{
set_board_info ldflags  "-msx6"
}}}
to the end of the .exp file. This will generate the correct magic number of 
the linked executable. If the SX-8 magic number is used the execution on SX-6 will fail.

== Running tests ==

First: add sx/bin to your PATH environment variable, such that the commands sx8-nec-superux-* can be found.

From inside the GCC build directory you can now run tests by calling:
{{{
env RUNTESTFLAGS="--target_board=v00" make check
}}}

It is possible to limit the range of tests, for example:
{{{
env RUNTESTFLAGS="--target_board=v00 compile.exp" make check
env RUNTESTFLAGS="--target_board=v00 execute.exp" make check
env RUNTESTFLAGS="--target_board=v00 builtins.exp" make check
}}}

If you need more verbosity, you can add several *-v* to the RUNTESTFLAGS.

The default output of the tests is limited and mainly shows failures. The full output is stored in the file gcc/testsuite/gcc/gcc.log .