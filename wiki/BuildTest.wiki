#summary Building and testing sx-gcc and sx-binutils.

= Introduction =

This page describes how to download and build sx-gcc and sx-binutils. Right now this should be done on a machine on which the SX cross-kit is installed. Until we get the GNU assembler and linker running, sxld and sxas need to be used. Right now also the libc delivered with the SX needs to be used!

= Details =

Check out repositories:
{{{
svn co https://source.tree.se/sx/sx-binutils/svn/trunk sx-binutils
svn co https://source.tree.se/sx/sx-gcc/svn/trunk sx-gcc
svn co https://source.tree.se/sx/sx-gcc/svn/includes sx-includes
}}}

Set up includes (WARNING: these are fake includes, copied from x86_64 and not really tested for full compatibility with the SX libc API!)
{{{
mkdir -p sx/sx8-nec-superux
cd sx/sx8-nec-superux
ln -s ../../sx-includes/ include
cd ../..
}}}

Build binutils:
{{{
cd sx-binutils 
./configure --target=sx8-nec-superux --enable-languages=c --prefix=`pwd`/../sx
make
make install
cd ..
}}}

GNU assembler (and to a lesser extent the linker) are mostly working and you can use them. However, you can choose to use native assembler and/or linker by following these steps:

1. make sure your PATH environment variable is set in such a manner that *sxld* and *sxas* are in the execution path.

2. create wrapper scripts for the assembler and linker.

{{{
cd sx/sx8-nec-superux/bin/
mv as as.org
mv ld ld.org

cat <<'EOF' >as
#!/bin/sh
o=`mktemp`
sxas "$@" >$o >2>&1
err=$?
grep -v "Warning: illegal offset" $o
rm -f $o
exit $err
EOF

chmod 755 as

cat <<'EOF' >ld
#!/bin/sh
exec sxld "$@"
EOF

chmod 755 ld
cd ../../..
}}}

Build gcc:
{{{
mkdir -p sx-build
cd sx-build
../sx-gcc/configure  --target=sx8-nec-superux --enable-languages=c \
  --prefix=`pwd`/../sx --disable-libssp --disable-threads
make -j 2
}}}

If GCC build fails during cross compilation of libgcc2 or other libraries for the SX cross environment, we need you to do the following with each bug encountered at this stage:
 * move to the directory where the build failed (make will spit out "Leaving directory xyz" when it fails),
 * reproduce the whole command line that failed (it will most likely begin with "/home/jaka/dev/sx/gcc/build/./gcc/xgcc"), and add "-save-temps -v" to it. run it!
 * now attach the whole output of this run to the bug report, as well as the intermediate files (preprocessed C source and generated assembler source, if they were generated)

Run tests...

(make check, of course, fails)

TODO