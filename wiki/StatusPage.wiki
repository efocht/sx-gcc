#summary Status of the port.

= Status =

There already exists a framework within the regular GCC 4.2.2 tree that allows to compile an SX cross compiler on i386 / x86_64 architectures (others have not been tested!).

We do regular tests and the current results can be found at :
http://source.tree.se/sx/sx-gcc/testrun/

== binutils port ==

|| *tool*      || *status* || *ticket list* || *notes* ||
|| ld        || ported || [http://code.google.com/p/sx-gcc/issues/list?q=label:ld issues] || ||
|| as        || ported || [http://code.google.com/p/sx-gcc/issues/list?q=label:gas issues] || ||
|| objdump   || ported || [http://code.google.com/p/sx-gcc/issues/list?q=label:objdump issues] || ||
|| addr2line || ported || [http://code.google.com/p/sx-gcc/issues/list?q=label:addr2line issues] || ||
|| ar        || ported || [http://code.google.com/p/sx-gcc/issues/list?q=label:ar issues] || ||
|| c++filt   || ported || TODO || ||
|| gprof     || TODO || TODO || ||
|| nlmconv   || TODO || TODO || ||
|| nm        || ported || [http://code.google.com/p/sx-gcc/issues/list?q=label:nm issues] || ||
|| objcopy   || ported  || [http://code.google.com/p/sx-gcc/issues/list?q=label:objcopy issues] || ||
|| ranlib    || ported || TODO || ||
|| readelf   || TODO || TODO || when building for COFF/SX target, we don't need this one ||
|| size      || ported || TODO || ||
|| strings   || ported || TODO || ||
|| strip     || ported || [http://code.google.com/p/sx-gcc/issues/list?q=label:strip issues] || ||
|| dlltool   || TODO || TODO || ||
|| windmc    || TODO || TODO || we don't really want this one ;) ||
|| windres   || TODO || TODO || we don't really want this one ;) ||

== gcc port ==

|| *tool*      || *status* || *ticket list* || *notes* ||
|| gcc         || ported   || [http://code.google.com/p/sx-gcc/issues/list?q=label:gcc issues] || done ||
|| g++         || porting  || [http://code.google.com/p/sx-gcc/issues/list?q=label:g++ issues] || done ||


Below, you can check the latest results of the built-in DejaGNU test cases for gcc, g++ and libstdc++ (the tests were performed with the following revisions of binutils and gcc: binutils r213, gcc r306):

gcc: <br>
# of expected passes          39319 <br>
# of unexpected failures      4 <br>
# of unexpected successes     2 <br>
# of expected failures        78 <br>
# of unresolved testcases     1 <br>
# of untested testcases       28 <br>
# of unsupported tests        507 <br>

g++: <br>
# of expected passes          12217 <br>
# of unexpected failures      6 <br>
# of expected failures        66 <br>
# of unsupported tests        197 <br>

libstdc++: <br>
# of expected passes          3623 <br>
# of unexpected failures      106 <br>
# of expected failures        13 <br>
# of unsupported tests        328 <br>

Currently the largest number of the tests that fail are in the "libstdc++" group. They can roughly be categorized in 4 groups:
 # 16 test cases fail because of the issue #138 in the sx-gcc bugtracker. We could fix them if we started using the SX format for quad precision floating point numbers instead of IEEE format.
 # 4 test cases fail because of the issue #141 in the sx-gcc bugtracker. These test cases fail only if the "-ffunction-sections -fdata-sections" switches are used when compiling the code.
 # 39 test cases fail because of the issue #139 in the sx-gcc bugtracker. These test cases fail to compile only if the "-g" switch is used when compiling the code (i.e. debugging info is enabled).
 # the cause of failure for the rest of the test cases is unknown. Some more time would have to be spent to identify them.

= Checking out and building the source =

Instructions are on the [BuildTest Building and Testing] wiki page.