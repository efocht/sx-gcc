#summary Status of the port.

= Status =

There already exists a framework within the regular GCC 4.2.2 tree that allows to compile an SX cross compiler on i386 / x86_64 architectures (others have not been tested!) The port is not completed and compilation stops with an error while compiling some parts of libgcc. Still the compilation steps leaves {{{xgcc}}} and {{{cc1}}} along with several other executables that can be used to compile at lease simple C programs.

== binutils port ==

|| *tool*      || *status* || *ticket list* || *notes* ||
|| ld        || TODO || TODO || ||
|| as        || TODO || TODO || ||
|| objdump   || ported, mostly works, relocations need to be fixed before fixing last bugs || [http://code.google.com/p/sx-gcc/issues/list?q=label:objdump issues] || ||
|| addr2line || TODO || TODO || ||
|| ar        || ported; everything works; requires rigorous interop testing with native SX tools || [http://code.google.com/p/sx-gcc/issues/list?q=label:ar issues] || ||
|| c++filt   || TODO || TODO || ||
|| gprof     || TODO || TODO || ||
|| nlmconv   || TODO || TODO || ||
|| nm        || ported; works with ordinary object files; need to test with executables and archives; some issues with linenos of undefined symbols remain (due to unsupported relocations) || [http://code.google.com/p/sx-gcc/issues/list?q=label:nm issues] || ||
|| objcopy   || TODO || TODO || ||
|| ranlib    || TODO || TODO || ||
|| readelf   || TODO || TODO || when building for COFF/SX target, we don't need this one ||
|| size      || TODO || TODO || ||
|| strings   || TODO || TODO || ||
|| strip     || TODO || TODO || ||
|| dlltool   || TODO || TODO || ||
|| windmc    || TODO || TODO || we don't really want this one ;) ||
|| windres   || TODO || TODO || we don't really want this one ;) ||

== gcc port ==

TODO

= Checking out and building the source =

Have a look at http://source.tree.se/sx/sx-gcc/ for instructions on checking out the source and building it.

The build process will/might crash in some place. But in the subdirectory _gcc_ you should find the built binaries *cc1*, *gcc-cross*, *cpp*, *xgcc*.

= Testing =

Do a
{{{
cd ../test
env PATH=$PATH:$BUILDDIR/gcc gcc-cross -S -dP test.c
}}}
... and look at the produced assembler file _test.s_.

The command line options related to dumping RTL at any of the compiler passes are interesting. *-dP* dumps RTL code as comment into the assembler output. But many more options can be used, check out the gcc manpage and options starting with *-fdump-rtl-*. For dumping all RTL intermediate files try *-fdump-rtl-all*.